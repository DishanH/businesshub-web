// Generate more mock data
const generateMockBusinesses = (count: number) => {
    return Array.from({ length: count }, (_, i) => ({
      id: i + 1,
      name: `Restaurant ${i + 1}`,
      address: `${i + 123} Food Street, Toronto, ON`,
      description: `A wonderful ${cuisineTypes[i % cuisineTypes.length]} restaurant with amazing food and atmosphere.`,
      rating: (Math.random() * 2 + 3).toFixed(1), // Random rating between 3.0 and 5.0
      image: "/placeholder.svg",
      cuisine: cuisineTypes[i % cuisineTypes.length],
      priceRange: Math.floor(Math.random() * 3) + 1, // 1-3 price range
      dietary: [dietaryPreferences[Math.floor(Math.random() * dietaryPreferences.length)]],
    }))
  }
  
  const mockBusinesses = generateMockBusinesses(50)



  // supabase storage Row Level Security(RLS)
  -- Create a new storage bucket named 'profiles'
INSERT INTO storage.buckets (id, name, public)
VALUES ('profiles', 'profiles', false);

-- Create policy to allow authenticated users to upload their own profile images
CREATE POLICY "Allow authenticated users to upload their own profile images"
ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'profiles' AND
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Create policy to allow users to view their own profile images
CREATE POLICY "Allow users to view their own profile images"
ON storage.objects
FOR SELECT
TO authenticated
USING (
  bucket_id = 'profiles' AND
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Create policy to allow users to update their own profile images
CREATE POLICY "Allow users to update their own profile images"
ON storage.objects
FOR UPDATE
TO authenticated
USING (
  bucket_id = 'profiles' AND
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Create policy to allow users to delete their own profile images
CREATE POLICY "Allow users to delete their own profile images"
ON storage.objects
FOR DELETE
TO authenticated
USING (
  bucket_id = 'profiles' AND
  (storage.foldername(name))[1] = auth.uid()::text
);

